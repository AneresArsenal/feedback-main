'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

require('babel-polyfill');

var _enzyme = require('enzyme');

var _fetchNormalizeData = require('fetch-normalize-data');

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactRedux = require('react-redux');

var _redux = require('redux');

var _reduxThunk = require('redux-thunk');

var _reduxThunk2 = _interopRequireDefault(_reduxThunk);

var _requestData = require('../requestData');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /* eslint-disable no-use-before-define */


var mockFoos = [{ id: 'AE', text: 'My foo is here', type: 'good' }, { id: 'BF', test: 'My other foo also', type: 'bad' }];

var storeEnhancer = (0, _redux.applyMiddleware)(_reduxThunk2.default.withExtraArgument({ rootUrl: 'https://momarx.com' }));
var rootReducer = (0, _redux.combineReducers)({ data: (0, _fetchNormalizeData.createDataReducer)({ foos: [] }) });

var Foos = function (_Component) {
  _inherits(Foos, _Component);

  function Foos() {
    _classCallCheck(this, Foos);

    return _possibleConstructorReturn(this, (Foos.__proto__ || Object.getPrototypeOf(Foos)).apply(this, arguments));
  }

  _createClass(Foos, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      var _props = this.props,
          apiPath = _props.apiPath,
          dispatch = _props.dispatch,
          handleFailExpectation = _props.handleFailExpectation;

      dispatch((0, _requestData.requestData)({
        apiPath: apiPath,
        handleFail: handleFailExpectation,
        stateKey: 'foos'
      }));
    }
  }, {
    key: 'render',
    value: function render() {
      var _props2 = this.props,
          foos = _props2.foos,
          handleSuccessExpectation = _props2.handleSuccessExpectation;


      if (foos && foos.length) {
        handleSuccessExpectation(foos);
      }

      return _react2.default.createElement(
        _react.Fragment,
        null,
        (foos || []).map(function (foo) {
          return _react2.default.createElement(
            'div',
            { key: foo.id },
            foo.text
          );
        })
      );
    }
  }]);

  return Foos;
}(_react.Component);

Foos.defaultProps = {
  foos: null,
  handleFailExpectation: function handleFailExpectation() {
    return {};
  },
  handleSuccessExpectation: function handleSuccessExpectation() {
    return {};
  }
};
Foos.propTypes = {
  apiPath: _propTypes2.default.string.isRequired,
  dispatch: _propTypes2.default.func.isRequired,
  foos: _propTypes2.default.arrayOf(_propTypes2.default.shape()),
  handleFailExpectation: _propTypes2.default.func,
  handleSuccessExpectation: _propTypes2.default.func
};
function mapStateToProps(state, ownProps) {
  return {
    foos: (state.data.foos || []).filter(function (foo) {
      return foo.type === ownProps.type;
    })
  };
}
var FoosContainer = (0, _reactRedux.connect)(mapStateToProps)(Foos);

jest.mock('fetch-normalize-data', function () {
  var actualModule = jest.requireActual('fetch-normalize-data');
  var mockFetchData = function mockFetchData(url, config) {
    if (url === 'https://momarx.com/failFoos') {
      return {
        errors: [],
        status: 400
      };
    }
    if (url === 'https://momarx.com/successFoos') {
      return {
        data: mockFoos,
        status: 200
      };
    }
    return actualModule.fetchData(url, config);
  };
  return _extends({}, actualModule, {
    fetchToSuccessOrFailData: function fetchToSuccessOrFailData(reducer, config) {
      return actualModule.fetchToSuccessOrFailData(reducer, Object.assign({}, config, { fetchData: mockFetchData }));
    }
  });
});

describe('redux-thunk-data with Foos basic usage', function () {
  describe('request with success', function () {
    it('should render test component whith foo items', function (done) {
      // given
      var store = (0, _redux.createStore)(rootReducer, storeEnhancer);
      var expectedFoos = mockFoos.filter(function (mockFoo) {
        return mockFoo.type === 'good';
      }).map(function (mockFoo) {
        return _extends({}, mockFoo, {
          __ACTIVITIES__: ['/successFoos']
        });
      });

      // when
      (0, _enzyme.mount)(_react2.default.createElement(
        _reactRedux.Provider,
        { store: store },
        _react2.default.createElement(FoosContainer, {
          apiPath: '/successFoos',
          handleSuccessExpectation: handleSuccessExpectation,
          type: 'good'
        })
      ));

      // then
      function handleSuccessExpectation(foos) {
        expect(foos).toEqual(expectedFoos);
        done();
      }
    });
  });

  describe('request with fail', function () {
    it('should render test component whith no foo items', function (done) {
      // given
      var store = (0, _redux.createStore)(rootReducer, storeEnhancer);

      // when
      (0, _enzyme.mount)(_react2.default.createElement(
        _reactRedux.Provider,
        { store: store },
        _react2.default.createElement(FoosContainer, {
          apiPath: '/failFoos',
          handleFailExpectation: handleFailExpectation
        })
      ));

      // then
      function handleFailExpectation(state, action) {
        var payload = action.payload;
        var errors = payload.errors;

        expect(errors).toHaveLength(2);
        done();
      }
    });
  });
});