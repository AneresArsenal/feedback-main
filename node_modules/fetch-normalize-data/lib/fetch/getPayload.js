"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getPayload = getPayload;
exports["default"] = exports.TIMEOUT_RESULT_ERROR = exports.GLOBAL_RESULT_ERROR = void 0;

var _status = require("./status");

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var GLOBAL_RESULT_ERROR = 'Result returned by the server is not at the good json format';
exports.GLOBAL_RESULT_ERROR = GLOBAL_RESULT_ERROR;
var TIMEOUT_RESULT_ERROR = 'Server did not respond within the specified timeout interval';
exports.TIMEOUT_RESULT_ERROR = TIMEOUT_RESULT_ERROR;

function getPayload(_x, _x2) {
  return _getPayload.apply(this, arguments);
}

function _getPayload() {
  _getPayload = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(result, config) {
    var globalResultError, timeoutResultError, ok, status, headers, payload, dataOrDatum;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            globalResultError = config.globalResultError || GLOBAL_RESULT_ERROR;
            timeoutResultError = config.timeoutResultError || TIMEOUT_RESULT_ERROR;
            ok = result.ok, status = result.status;
            headers = {};
            result.headers.forEach(function (value, key) {
              headers[key] = value;
            });
            payload = {
              headers: headers,
              ok: ok,
              status: status
            };

            if (!(_status.errorTimeoutStatusCode === status)) {
              _context.next = 9;
              break;
            }

            payload.errors = [{
              global: [globalResultError]
            }, {
              timeout: [timeoutResultError]
            }];
            return _context.abrupt("return", payload);

          case 9:
            if (!_status.successStatusCodesWithDataOrDatum.includes(status)) {
              _context.next = 18;
              break;
            }

            if (result.json) {
              _context.next = 13;
              break;
            }

            payload.errors = [{
              global: [globalResultError]
            }];
            return _context.abrupt("return", payload);

          case 13:
            _context.next = 15;
            return result.json();

          case 15:
            dataOrDatum = _context.sent;

            if (Array.isArray(dataOrDatum)) {
              payload.data = dataOrDatum;
            } else if (_typeof(dataOrDatum) === 'object') {
              payload.datum = dataOrDatum;
            }

            return _context.abrupt("return", payload);

          case 18:
            if (!_status.successStatusCodesWithoutDataAndDatum.includes(status)) {
              _context.next = 20;
              break;
            }

            return _context.abrupt("return", payload);

          case 20:
            if (result.json) {
              _context.next = 23;
              break;
            }

            payload.errors = [{
              global: [globalResultError]
            }];
            return _context.abrupt("return", payload);

          case 23:
            _context.next = 25;
            return result.json();

          case 25:
            payload.errors = _context.sent;
            return _context.abrupt("return", payload);

          case 27:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _getPayload.apply(this, arguments);
}

var _default = getPayload;
exports["default"] = _default;