"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fetchData = fetchData;
exports["default"] = void 0;

var _status = require("./status");

var _getInit = _interopRequireDefault(require("./getInit"));

var _getPayload = _interopRequireDefault(require("./getPayload"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function fetchData(_x) {
  return _fetchData.apply(this, arguments);
}

function _fetchData() {
  _fetchData = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(url) {
    var config,
        fetchTimeout,
        fetchConfig,
        fetchPromise,
        result,
        timeoutPromise,
        payload,
        _args = arguments;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            config = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};
            fetchTimeout = config.fetchTimeout;
            fetchConfig = (0, _getInit["default"])(config);
            fetchPromise = fetch(url, fetchConfig);

            if (!fetchTimeout) {
              _context.next = 11;
              break;
            }

            timeoutPromise = new Promise(function (resolve) {
              return setTimeout(function () {
                return resolve(new Response(null, {
                  status: _status.errorTimeoutStatusCode
                }));
              }, fetchTimeout);
            });
            _context.next = 8;
            return Promise.race([timeoutPromise, fetchPromise]);

          case 8:
            result = _context.sent;
            _context.next = 14;
            break;

          case 11:
            _context.next = 13;
            return fetchPromise;

          case 13:
            result = _context.sent;

          case 14:
            _context.next = 16;
            return (0, _getPayload["default"])(result, fetchConfig);

          case 16:
            payload = _context.sent;
            return _context.abrupt("return", payload);

          case 18:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _fetchData.apply(this, arguments);
}

var _default = fetchData;
exports["default"] = _default;