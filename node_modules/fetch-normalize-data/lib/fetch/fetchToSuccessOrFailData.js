"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fetchToSuccessOrFailData = fetchToSuccessOrFailData;
exports["default"] = void 0;

var _errors = require("./errors");

var _fetchData = require("./fetchData");

var _getConfigWithDefaultValues = _interopRequireDefault(require("./getConfigWithDefaultValues"));

var _getUrlFromConfig = _interopRequireDefault(require("./getUrlFromConfig"));

var _handleApiSuccess = _interopRequireDefault(require("./handleApiSuccess"));

var _status = require("./status");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function fetchToSuccessOrFailData(_x, _x2) {
  return _fetchToSuccessOrFailData.apply(this, arguments);
}

function _fetchToSuccessOrFailData() {
  _fetchToSuccessOrFailData = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(reducer, configWithoutDefaultValues) {
    var config, url, fetchDataMethod, payload, isSuccess, isTimeout;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            config = (0, _getConfigWithDefaultValues["default"])(configWithoutDefaultValues);
            url = (0, _getUrlFromConfig["default"])(config);
            fetchDataMethod = config.fetchData || _fetchData.fetchData;
            _context.prev = 3;
            _context.next = 6;
            return fetchDataMethod(url, config);

          case 6:
            payload = _context.sent;
            isSuccess = (0, _status.isSuccessStatus)(payload.status);

            if (!isSuccess) {
              _context.next = 11;
              break;
            }

            (0, _handleApiSuccess["default"])(reducer, payload, config);
            return _context.abrupt("return");

          case 11:
            isTimeout = (0, _status.isTimeoutStatus)(payload.status);

            if (!isTimeout) {
              _context.next = 15;
              break;
            }

            (0, _errors.handleTimeoutError)(reducer, payload, config);
            return _context.abrupt("return");

          case 15:
            if (payload.errors) {
              (0, _errors.handleApiError)(reducer, payload, config);
            }

            _context.next = 21;
            break;

          case 18:
            _context.prev = 18;
            _context.t0 = _context["catch"](3);
            (0, _errors.handleServerError)(reducer, _context.t0, config);

          case 21:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[3, 18]]);
  }));
  return _fetchToSuccessOrFailData.apply(this, arguments);
}

var _default = fetchToSuccessOrFailData;
exports["default"] = _default;