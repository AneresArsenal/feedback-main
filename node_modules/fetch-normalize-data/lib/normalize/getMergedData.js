"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getMergedData = getMergedData;
exports["default"] = void 0;

var _utils = require("./utils");

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(n); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function getMergedData(nextData, previousData, config) {
  if (!previousData) {
    return nextData;
  }

  var isMergingDatum = config.isMergingDatum,
      isMutatingDatum = config.isMutatingDatum;
  var getDatumIdValue = config.getDatumIdValue || _utils.getDefaultDatumIdValue;
  var isMutatingArray = typeof config.isMutatingArray === 'undefined' ? true : config.isMutatingArray;
  var mergedData = isMutatingArray ? _toConsumableArray(previousData) : previousData; // for each datum we are going to assign (by merging or not) them into
  // their right place in the resolved array

  nextData.forEach(function (nextDatum) {
    var previousIndex = previousData.findIndex(function (previousDatum) {
      return getDatumIdValue(previousDatum) === getDatumIdValue(nextDatum);
    });
    var resolvedIndex = previousIndex === -1 ? mergedData.length : previousIndex;
    var datum;

    if (isMutatingDatum) {
      datum = Object.assign({}, isMergingDatum && previousData[previousIndex], nextDatum);
    } else if (isMergingDatum) {
      datum = previousIndex !== -1 ? Object.assign(previousData[previousIndex], nextDatum) : nextDatum;
    } else {
      datum = nextDatum;
    }

    mergedData[resolvedIndex] = datum;
  });
  return mergedData;
}

var _default = getMergedData;
exports["default"] = _default;