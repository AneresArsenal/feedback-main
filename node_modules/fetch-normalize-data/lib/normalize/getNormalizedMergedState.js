"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getNormalizedMergedState = getNormalizedMergedState;
exports["default"] = void 0;

var _getProcessedData = _interopRequireDefault(require("./getProcessedData"));

var _getMergedData = _interopRequireDefault(require("./getMergedData"));

var _normalize2 = _interopRequireDefault(require("./normalize"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function getNormalizedMergedState(state, patch) {
  var config = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var isMergingArray = typeof config.isMergingArray === 'undefined' ? true : config.isMergingArray;
  var nextState = config.nextState || {};

  if (!patch) {
    return state;
  }

  Object.keys(patch).forEach(function (patchKey) {
    var patchData = patch[patchKey];

    if (!patchData) {
      return;
    }

    var nextData = (0, _getProcessedData["default"])(patchData, config);

    function doWithNormalizedPatch(normalizedPatch, normalizerConfig) {
      var subNormalizedMergedState = getNormalizedMergedState(state, normalizedPatch, Object.assign({
        nextState: nextState
      }, normalizerConfig));
      Object.assign(nextState, subNormalizedMergedState);
    }

    var normalizeConfig = Object.assign({
      doWithNormalizedPatch: doWithNormalizedPatch
    }, config);
    (0, _normalize2["default"])(_defineProperty({}, patchKey, nextData), normalizeConfig);

    if (isMergingArray) {
      var previousData = state[patchKey];
      nextData = (0, _getMergedData["default"])(nextData, previousData, config);
    }

    nextState[patchKey] = nextData;
  });
  return nextState;
}

var _default = getNormalizedMergedState;
exports["default"] = _default;