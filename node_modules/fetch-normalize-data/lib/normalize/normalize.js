"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.normalizeDataAtItem = normalizeDataAtItem;
exports.normalizeData = normalizeData;
exports.normalize = normalize;
exports["default"] = void 0;

var _getReshapedNormalizer = _interopRequireDefault(require("./getReshapedNormalizer"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// MUTATING FUNCTION
function normalizeDataAtItem(data, datumKey, stateKey, config) {
  var doWithNormalizedPatch = config.doWithNormalizedPatch;
  var normalizedData = [];
  data.forEach(function (datum) {
    var normalizedValue = datum[datumKey];

    if (Array.isArray(normalizedValue)) {
      normalizedData = normalizedData.concat(normalizedValue);
      delete datum[datumKey];
    } else if (normalizedValue) {
      normalizedData.push(datum[datumKey]);
      delete datum[datumKey];
    }
  });

  if (normalizedData.length) {
    if (doWithNormalizedPatch) {
      var singletonPatch = _defineProperty({}, stateKey, normalizedData);

      doWithNormalizedPatch(singletonPatch, config);
    }
  }
} // MUTATING FUNCTION


function normalizeData(data, config) {
  var globalIsMergingDatum = config.isMergingDatum,
      globalIsMutatingDatum = config.isMutatingDatum,
      normalizer = config.normalizer;
  var reshapedNormalizer = (0, _getReshapedNormalizer["default"])(normalizer);
  Object.keys(normalizer).forEach(function (datumKey) {
    var _reshapedNormalizer$d = reshapedNormalizer[datumKey],
        isMergingDatum = _reshapedNormalizer$d.isMergingDatum,
        isMutatingDatum = _reshapedNormalizer$d.isMutatingDatum,
        stateKey = _reshapedNormalizer$d.stateKey;
    var subNormalizer = reshapedNormalizer[datumKey].normalizer || {};
    var subConfig = Object.assign({}, config, {
      isMergingDatum: typeof isMergingDatum !== 'undefined' ? isMergingDatum : globalIsMergingDatum,
      isMutatingDatum: typeof isMutatingDatum !== 'undefined' ? isMutatingDatum : globalIsMutatingDatum,
      normalizer: _defineProperty({}, stateKey, {
        normalizer: subNormalizer,
        stateKey: stateKey
      })
    });
    normalizeDataAtItem(data, datumKey, stateKey, subConfig);
  });
} // MUTATING FUNCTION


function normalize(obj, config) {
  var normalizer = config.normalizer;

  if (normalizer) {
    var reshapedNormalizer = (0, _getReshapedNormalizer["default"])(normalizer);
    Object.keys(reshapedNormalizer).forEach(function (datumKey) {
      var data = obj[datumKey];
      var subNormalizer = reshapedNormalizer[datumKey].normalizer;

      if (!subNormalizer) {
        return;
      }

      var subConfig = Object.assign({}, config, {
        normalizer: subNormalizer
      });
      normalizeData(data, subConfig);
    });
  }
}

var _default = normalize;
exports["default"] = _default;