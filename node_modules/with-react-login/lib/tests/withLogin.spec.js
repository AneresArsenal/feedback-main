'use strict';

require('babel-polyfill');

var _enzyme = require('enzyme');

var _history = require('history');

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactRouterDom = require('react-router-dom');

var _reactRedux = require('react-redux');

var _reduxThunkData = require('redux-thunk-data');

var _withLogin = require('../withLogin');

var _withLogin2 = _interopRequireDefault(_withLogin);

var _configure = require('./configure');

var _Foo = require('./Foo');

var _Foo2 = _interopRequireDefault(_Foo);

var _Signin = require('./Signin');

var _Signin2 = _interopRequireDefault(_Signin);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('src | components | pages | hocs | withLogin', function () {

  beforeEach(function () {
    fetch.resetMocks();
  });

  describe('snapshot', function () {
    it('should match snapshot', function () {
      // given
      var LoginFoo = (0, _withLogin2.default)({
        withDispatcher: function withDispatcher(WrappedComponent) {
          return function () {
            return _react2.default.createElement(WrappedComponent, { dispatch: function dispatch() {} });
          };
        }
      })(_Foo2.default);

      // when
      var wrapper = (0, _enzyme.shallow)(_react2.default.createElement(LoginFoo, null));

      // then
      expect(wrapper).toBeDefined();
      expect(wrapper).toMatchSnapshot();
    });
  });

  describe('functions', function () {
    describe('login with success', function () {
      it('should render test component when login is a success', function (done) {
        // when
        var history = (0, _history.createBrowserHistory)();
        history.push('/test');
        var store = (0, _configure.configureTestStore)();
        var LoginFoo = (0, _withLogin2.default)({
          requestData: _reduxThunkData.requestData,
          withDispatcher: (0, _reactRedux.connect)()
        })(_Foo2.default);
        (0, _configure.configureFetchCurrentUserWithLoginSuccess)();

        // then
        (0, _enzyme.mount)(_react2.default.createElement(
          _reactRedux.Provider,
          { store: store },
          _react2.default.createElement(
            _reactRouterDom.Router,
            { history: history },
            _react2.default.createElement(
              _reactRouterDom.Route,
              { path: '/test' },
              _react2.default.createElement(LoginFoo, { onMountCallback: done })
            )
          )
        ));
      });
    });
    describe('login with fail', function () {
      it('should redirect to failRedirect when login is a fail', function (done) {
        // when
        var history = (0, _history.createBrowserHistory)();
        history.push('/test');
        var store = (0, _configure.configureTestStore)();
        var LoginFoo = (0, _withLogin2.default)({
          handleFail: function handleFail() {
            return history.push("/signin");
          },
          requestData: _reduxThunkData.requestData,
          withDispatcher: (0, _reactRedux.connect)()
        })(_Foo2.default);
        (0, _configure.configureFetchCurrentUserWithLoginFail)();

        // then
        (0, _enzyme.mount)(_react2.default.createElement(
          _reactRedux.Provider,
          { store: store },
          _react2.default.createElement(
            _reactRouterDom.Router,
            { history: history },
            _react2.default.createElement(
              _reactRouterDom.Switch,
              null,
              _react2.default.createElement(
                _reactRouterDom.Route,
                { path: '/test' },
                _react2.default.createElement(LoginFoo, null)
              ),
              _react2.default.createElement(
                _reactRouterDom.Route,
                { path: '/signin' },
                _react2.default.createElement(_Signin2.default, { onMountCallback: done })
              )
            )
          )
        ));
      });
    });
  });
});